# personal notes
# - try to make all modifiers three leters long
#   ex: pub int variable_name = ...

from stdlib import stdout as out

fun primitives() {
    # primitive types are those which always have a constant size at compile time

    # numeric types
    int<128>[3] pos = [0,0,0];  # int<128>[3] pos = [0,0,0];
    uint i = 0;                 # uint<32>[1] = [0];
    flt<64> total = 12.7;     # flt<64>[1] = [12.7];

    # bool is aliased to uint<1>[1]
    # char is aliased to uint<8>[1]

    # int    defualts to int<32>[1]
    # uint   defaults to uint<32>[1]
    # flt  defaults to float<32>[1]
}

fun primitives+() {
    # character types
    utf ch = 'b';               # utf<8>[1] = ['a'];
    str<utf<8>> = "Hello world";
}

fun structures() {
    struct
    tuple
    class
    union
}

class Person {
    pub str first_name;
    pub str last_name;
    pri uint ssn;

    pub con() {
        this.first_name = "John";
        this.last_name = "Smith"
    }
    # functions are either pure (only returns a value, no side effects) or void (no return value, only causes side effects)
    pub fun full_name(): str { # Pure. instance functions are constant
        return str.concat([this.first_name, this.last_name]);
    }
    pub fun set_first_name(new_value: string) { # Impure
        this.first_name = new_value;
    }
}

fun control(): int {
    int<32> result;
    
    # if else
    if(a == b) {
        result = 1;
    } else if(a < b) {
        result = 2;
    } else {
        result = 3;
    }

    # match
    match(result) {
        case(a < b) {
            result = 1;
        }
        case(a == b) {
            result = 2;
        }
        case(a > b) {
            result = 3;
        }
    }

    # while loop
    while(result < 20) {
        result += 1;
    }

    # do while loop
    while({
        result += 1;
        result < 20
    })

    result
}

fun main(string<char>[]): int {
    
}
