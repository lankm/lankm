class Quaternion {
  pub stat mul(float<64>[4] a, float<64>[4] b): float<64>[4] {
    # TODO
  }
  pub stat inv(float<64>[4] a): float<64>[4] {
    # TODO
  }
  pub stat rotate(float<64>[4] ori, float<64>[3] vec): float<64>[3] {
    # TODO
  }
}

class Pose {
  pri inst float<64>    glob_time;

  pri inst float<64>[3] glob_pos;
  pri inst float<64>[3] glob_pos_vel;

  pri inst float<64>[4] glob_ori;
  pri inst float<64>[3] glob_rot_axis;
  pri inst float<64>    glob_rot_vel;

  pri inst cur_glob_pos(float<64> time): float<64>[3] {
    dt = time - glob_time;
    return glob_pos + dt*glob_ps_vel;
  }
  pri inst cur_glob_ori(float<64> time): float<64>[4] {
    float<64>    dt = time - glob_time;
    float<64>    angle = dt*vel
    float<64>[2] sincos = [sin(angle), cos(angle)];

    float<64>[4] rot = [
      sincos[0], 
      sincos[1]*glob_rot_axis[0],
      sincos[1]*glob_rot_axis[1],
      sincos[1]*glob_rot_axis[2]
    ]

    return Quaternion.mul(rot, glob_ori);
  }
  pri inst update(float<64> time) {
    glob_pos = cur_glob_pos(time);
    glob_ori = cur_glob_ori(time);
    glob_time = time;
  }
  
  pri inst glob_pos_diff(Pose other, float<64> time): float<64>[3] {
    return other.cur_glob_pos(time) - cur_glob_pos(time);
  }
  pri inst glob_vel_diff(Pose other, float<64> time): float<64>[3] {
    return other.glob_pos_vel - glob_pos_vel;
  }

  pub inst rel_pos(Pose other, float<64> time): float<64>[3] {
    float<64>[3] glob_pos_diff = glob_pos_diff(other, time);
    float<64>[4] glob_cur_ori = Quaternion.inv(cur_glob_ori(other, time));
    return Quaternion.rotate(glob_cur_ori, glob_pos_diff);
  }
  pub inst rel_ori(Pose other, float<64> time): float<64>[4] {
    float<64>[4] glob_cur_ori = Quaternion.inv(cur_glob_ori(other, time));
    return Quaternion.mul(cur_glob_ori, other.rot.cur_glob_ori());
  }
  pub rel_vel(Pose other, float<64> time): float<64>[3] {
    float<64>[3] glob_vel_diff = glob_vel_diff(other, time);
    float<64>[4] glob_cur_ori = Quaternion.inv(cur_glob_ori(other, time));
    return Quaternion.rotate(glob_cur_ori, glob_pos_diff);
  }
}

class Entity # applies relative forces. pose.trans.cur_pos() is the center of mass.
  pri pose # pose object
  pri mass # inertial mass
  pri moi # moment of inertia

  [TODO continue]